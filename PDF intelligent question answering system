
import os
import openai
import fitz  # PyMuPDF for PDF highlighting
from flask import Flask, request, jsonify, send_file

# Set OpenAI API Key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Initialize Flask app
app = Flask(__name__)

# -------------------- 1️ Upload PDF and Store in OpenAI File Search API --------------------
@app.route('/upload', methods=['POST'])
def upload_pdf():
    """Uploads a PDF to OpenAI File Search API."""
    pdf_file = request.files.get("file")
    
    if not pdf_file:
        return jsonify({"error": "No file uploaded"}), 400

    # Save temporarily
    pdf_path = f"uploads/{pdf_file.filename}"
    pdf_file.save(pdf_path)

    # Upload file to OpenAI File Search API
    with open(pdf_path, "rb") as f:
        response = openai.File.create(file=f, purpose="answers")

    file_id = response["id"]
    return jsonify({"message": "PDF uploaded successfully", "file_id": file_id})

# -------------------- 2️ User Query Processing --------------------
@app.route('/query', methods=['POST'])
def process_query():
    """Handles user query, retrieves relevant sections, generates GPT-4 response, and highlights text."""
    data = request.json
    query = data.get("query")
    file_id = data.get("file_id")
    pdf_path = data.get("pdf_path")  # Path to original PDF
    
    if not query or not file_id or not pdf_path:
        return jsonify({"error": "Query, file_id, and pdf_path are required"}), 400

    # 3️ Convert Query to Embedding
    query_embedding = openai.Embedding.create(
        input=[query],
        model="text-embedding-ada-002"
    )["data"][0]["embedding"]

    # 4️ Retrieve Relevant Sections
    search_response = openai.FileSearch.search(
        file_id=file_id,
        query_embedding=query_embedding
    )

    retrieved_text = search_response["data"][0]["text"]

    # 5️ Generate GPT-4 Response
    gpt_response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": retrieved_text}]
    )["choices"][0]["message"]["content"]

    # Highlight Retrieved Text in PDF
    highlighted_pdf = highlight_text_in_pdf(pdf_path, retrieved_text)

    return jsonify({
        "gpt_response": gpt_response,
        "highlighted_pdf": highlighted_pdf
    })

# -------------------- 6️ Function to Highlight Text in PDF --------------------
def highlight_text_in_pdf(pdf_path, text_to_highlight):
    """Highlights retrieved text in the given PDF."""
    doc = fitz.open(pdf_path)
    found = False

    for page in doc:
        instances = page.search_for(text_to_highlight)
        if instances:
            found = True
            for inst in instances:
                page.add_highlight_annot(inst)

    if found:
        highlighted_pdf_path = "highlighted_output.pdf"
        doc.save(highlighted_pdf_path)
        doc.close()
        return highlighted_pdf_path
    else:
        doc.close()
        return None  # No matching text found

# -------------------- 7️ Serve the Highlighted PDF --------------------
@app.route('/get_highlighted_pdf', methods=['GET'])
def get_highlighted_pdf():
    """Returns the highlighted PDF for frontend display."""
    return send_file("highlighted_output.pdf", as_attachment=False)

# -------------------- 8️ Run Flask App --------------------
if __name__ == '__main__':
    app.run(debug=True)
